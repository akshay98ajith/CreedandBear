{"version":3,"file":"static/js/129.4b7ad255.chunk.js","mappings":"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","sources":["Pages/Login.jsx","api.js"],"sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { users } from \"../api\";\r\n\r\nconst Login = () => {\r\n  const { register, handleSubmit } = useForm();\r\n  console.log(\"username\", users[1].username);\r\n  console.log(\"password\", users[1].password);\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    if (\r\n      data.username === users[1].username &&\r\n      data.password === users[1].password\r\n    ) {\r\n      const token = data.username + \"token\";\r\n      sessionStorage.setItem(\"token\", token);\r\n      sessionStorage.setItem(\"username\", data.username);\r\n      window.location.reload();\r\n      console.log(\"Successfully logged in\");\r\n    } else {\r\n      alert(\"validation failed\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"login\">\r\n        <div className=\"card\">\r\n          <form className=\"loginForm\" onSubmit={handleSubmit(onSubmit)}>\r\n            <label>\r\n              <span>Username</span>\r\n              <input\r\n                placeholder={users[1].username}\r\n                type=\"text\"\r\n                {...register(\"username\", { requierd: true })}\r\n                required\r\n              />\r\n            </label>\r\n            <label>\r\n              <span>Password</span>\r\n              <input\r\n                placeholder={users[1].password}\r\n                type=\"password\"\r\n                {...register(\"password\", { requierd: true })}\r\n                required\r\n              />\r\n            </label>\r\n            <div className=\"tac\">\r\n              <button className=\"loginBtn\" type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"credentials\">\r\n        <div>username: superuser</div>\r\n        <div>password: superuser</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { faker } from \"@faker-js/faker\";\r\n\r\nexport let users = {\r\n    1: {\r\n        id: 1,\r\n        avatar: \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/818.jpg\",\r\n        first_name: 'Super',\r\n        last_name: 'User',\r\n        username: 'superuser',\r\n        email: 'super@super.com',\r\n        phone: '11111111',\r\n        password: 'superuser',\r\n        address: faker.address.city(),\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersAPI = () =>\r\n    new Promise((resolve, reject) => {\r\n        if (!users) {\r\n            return setTimeout(\r\n                () => reject(new Error('Users not found')),\r\n                250\r\n            );\r\n        }\r\n        setTimeout(() => resolve(Object.values(users)), 250);\r\n    });\r\n\r\nexport const getUserProfileAPI = (id) =>\r\n    new Promise((resolve, reject) => {\r\n        const user = users[id];\r\n        if (!user) {\r\n            return setTimeout(\r\n                () => reject(new Error('User not found')),\r\n                250\r\n            );\r\n        }\r\n        setTimeout(() => resolve(user), 250);\r\n    });\r\n\r\n\r\nexport const createUserAPI = (data) =>\r\n    new Promise((resolve, reject) => {\r\n        // if (!data.firstName || !data.lastName) {\r\n        //     reject(new Error('Not all information provided'));\r\n        // }\r\n        const id = faker.datatype.uuid();\r\n        const avatar = faker.internet.avatar()\r\n        const newUser = { id, avatar, ...data };\r\n        users = { ...users, [id]: newUser };\r\n        setTimeout(() => resolve(true), 250);\r\n    });\r\n\r\nexport const generateUserAPI = () =>\r\n    new Promise((resolve, reject) => {\r\n        // if (!data.firstName || !data.lastName) {\r\n        //     reject(new Error('Not all information provided'));\r\n        // }\r\n        const id = faker.datatype.uuid();\r\n        const first_name = faker.name.firstName();\r\n        const last_name = faker.name.lastName();\r\n        const email = faker.internet.email();\r\n        const avatar = faker.internet.avatar();\r\n        const address = faker.address.city();\r\n        const phone = faker.phone.number();\r\n        const password = faker.internet.password();\r\n        const username = faker.internet.userName();\r\n        const newUser = { id, first_name, last_name, email, avatar, address, phone, password, username };\r\n        users = { ...users, [id]: newUser }\r\n        setTimeout(() => resolve(true), 250);\r\n    });\r\n\r\nexport const deleteUserAPI = (id) =>\r\n    new Promise((resolve, reject) => {\r\n        const { [id]: user, ...rest } = users;\r\n\r\n        if (!user) {\r\n            return setTimeout(\r\n                () => reject(new Error('User not found')),\r\n                250\r\n            );\r\n        }\r\n\r\n        users = { ...rest };\r\n\r\n        return setTimeout(() => resolve(true), 250);\r\n    });\r\n\r\nexport const updateUserAPI = (id, data) =>\r\n    new Promise((resolve, reject) => {\r\n        if (!users[id]) {\r\n            return setTimeout(\r\n                () => reject(new Error('User not found')),\r\n                250\r\n            );\r\n        }\r\n\r\n        users[id] = { ...users[id], ...data };\r\n\r\n        return setTimeout(() => resolve(true), 250);\r\n    });"],"names":["useForm","register","handleSubmit","console","log","users","className","onSubmit","data","username","password","token","sessionStorage","setItem","window","location","reload","alert","placeholder","type","requierd","required","id","avatar","first_name","last_name","email","phone","address","faker","getUsersAPI","Promise","resolve","reject","setTimeout","Error","Object","values","getUserProfileAPI","user","createUserAPI","newUser","generateUserAPI","deleteUserAPI","rest","updateUserAPI"],"sourceRoot":""}